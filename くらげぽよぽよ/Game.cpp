/*******************************************************************************
* タイトル:		Game処理
* プログラム名:	Game.cpp
* 作成者:		GP11A331 4 伊原佑稀
* 作成日:		2016/02/23
********************************************************************************
* 更新履歴:		- 2016/02/23	伊原
*					- V1.00		Initial Version
*******************************************************************************/
/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "Game.h"
#include "Input.h"
#include "Fade.h"
#include "Camera.h"
#include "Light.h"
#include "UI.h"
#include "Shadow.h"
#include "Player.h"
#include "Object.h"
#include "Texture.h"
#include "DebugProc.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************

/*******************************************************************************
* 構造体定義
*******************************************************************************/

/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/

/*******************************************************************************
* グローバル変数
*******************************************************************************/
GAME_MODE		g_gameMode = GAME_MODE_HOME;		// 現在のゲームモード
TRAINING_MODE	g_trainingMode = TRAINING_MODE_INTELLIGENCE;	// 現在のトレーニングモード

/*******************************************************************************
関数名:	void InitGame(void)
引数:	なし
戻り値:	なし
説明:	Gameの初期化
*******************************************************************************/
void InitGame(void)
{
	// カメラの初期化
	InitCamera();

	// ライトの初期化
	InitLight();

	// オブジェクトの初期化
	InitObject();

	// UIの初期化
	InitUI();
}

/*******************************************************************************
関数名:	void UninitGame(void)
引数:	なし
戻り値:	なし
説明:	Gameの終了処理
*******************************************************************************/
void UninitGame(void)
{
	// カメラの終了処理
	UninitCamera();

	// ライトの終了処理
	UninitLight();

	// UIの終了処理
	UninitUI();
}

/*******************************************************************************
関数名:	void UpdateGame(void)
引数:	なし
戻り値:	なし
説明:	Gameの更新処理
*******************************************************************************/
void UpdateGame(void)
{
	// カメラの更新処理
	UpdateCamera();

	// ライトの更新処理
	UpdateLight();

	// オブジェクトの更新処理
	UpdateObject();

	// UIの更新処理
	UpdateUI();
}

/*******************************************************************************
関数名:	void DrawGame(void)
引数:	なし
戻り値:	なし
説明:	Gameの描画
*******************************************************************************/
void DrawGame(void)
{
	// カメラのセット
	SetCamera();

	// オブジェクトの描画処理
	DrawObject();

	// UIの描画
	DrawUI();

	PrintDebugProc("%d",g_gameMode);
}

/*******************************************************************************
関数名:	void SetGameMode(void)
引数:	セットするゲームモード
戻り値:	なし
説明:	ゲームモードをセット
*******************************************************************************/
void SetGameMode(int mode)
{
	switch(mode)
	{
		case 0:
			g_gameMode = GAME_MODE_HOME;
			break;
		case 1:
			g_gameMode = GAME_MODE_TRAINING;
			break;
		case 2:
			g_gameMode = GAME_MODE_REST;
			break;
		case 3:
			g_gameMode = GAME_MODE_CONTACT;
			break;
		case 4:
			g_gameMode = GAME_MODE_FOOD;
			break;
		case 5:
			g_gameMode = GAME_MODE_CAMERA;
			break;
		case 6:
			g_gameMode = GAME_MODE_HISTORY;
			break;
		case 7:
			g_gameMode = GAME_MODE_OPTION;
			break;
	}
}
/*******************************************************************************
関数名:	GAME_MODE GetGameMode(void)
引数:	なし
戻り値:	GAME_MODE g_gameMode
説明:	現在のゲームモードを返す
*******************************************************************************/
GAME_MODE GetGameMode(void)
{
	return g_gameMode;
}
/*******************************************************************************
関数名:	void SetTraningMode(int mode)
引数:	セットするトレーニングモード
戻り値:	なし
説明:	トレーニングモードをセット
*******************************************************************************/
void SetTraningMode(int mode)
{
	switch(mode)
	{
		case 0:	// 知性
			g_trainingMode = TRAINING_MODE_INTELLIGENCE;
			break;
		case 1:	// 体力
			g_trainingMode = TRAINING_MODE_MOBILITY;
			break;
		case 2:	// 感性
			g_trainingMode = TRAINING_MODE_SENSIBILLITY;
			break;
		case 3:	// 正義感
			g_trainingMode = TRAINING_MODE_JUSTICE;
			break;
	}
}
/*******************************************************************************
関数名:	TRAINING_MODE GetTraningMode(void)
引数:	なし
戻り値:	TRAINING_MODE g_trainingMode
説明:	現在のゲームモードを返す
*******************************************************************************/
TRAINING_MODE GetTraningMode(void)
{
	return g_trainingMode;
}
